/*
 * Access token
 *
 * The Access token API is for requesting an access token, which is a JWT (JSON Web Token).  There are two endpoints:  1. `POST:/accesstoken/get`: Used by most APIs, and has been in use for several years. 2. `POST:/miami/v1/token`: Used by some new APIs and roles, from 2023.  For `POST:/accesstoken/get`: The access token must be provided in all API requests, together with the subscription key. The access token is valid for 1 hour in the test environment and 24 hours in the production environment.  For `POST:/miami/v1/token`: The access token must be provided in all API requests (no subscription key needed). The access token is valid for 15 minutes in both the test environment and the production environment.  See the [API Guide](/docs/APIs/access-token-api) for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using VippsAccessTokenApi.Client;
using VippsAccessTokenApi.Model;

namespace VippsAccessTokenApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITokenEndpointApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Request an access token.
        /// </summary>
        /// <remarks>
        /// This is a token endpoint for partners in certain roles. This is based on OAuth (Open Authorization) and requires only &#x60;client_id&#x60; and &#x60;client_secret&#x60;. The &#x60;Ocp-Apim-Subscription-Key&#x60; is not used. *Important:* This endpoint will be renamed to &#x60;/authentication/v1/token&#x60; later, when the internal technical dependencies are resolved.
        /// </remarks>
        /// <exception cref="VippsAccessTokenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The string &#39;client_id:client_secret&#39; encoded to Base64 with Basic in front</param>
        /// <param name="grantType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TokenResponse</returns>
        TokenResponse FetchToken(string authorization, string grantType = default(string), int operationIndex = 0);

        /// <summary>
        /// Request an access token.
        /// </summary>
        /// <remarks>
        /// This is a token endpoint for partners in certain roles. This is based on OAuth (Open Authorization) and requires only &#x60;client_id&#x60; and &#x60;client_secret&#x60;. The &#x60;Ocp-Apim-Subscription-Key&#x60; is not used. *Important:* This endpoint will be renamed to &#x60;/authentication/v1/token&#x60; later, when the internal technical dependencies are resolved.
        /// </remarks>
        /// <exception cref="VippsAccessTokenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The string &#39;client_id:client_secret&#39; encoded to Base64 with Basic in front</param>
        /// <param name="grantType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TokenResponse</returns>
        ApiResponse<TokenResponse> FetchTokenWithHttpInfo(string authorization, string grantType = default(string), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITokenEndpointApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Request an access token.
        /// </summary>
        /// <remarks>
        /// This is a token endpoint for partners in certain roles. This is based on OAuth (Open Authorization) and requires only &#x60;client_id&#x60; and &#x60;client_secret&#x60;. The &#x60;Ocp-Apim-Subscription-Key&#x60; is not used. *Important:* This endpoint will be renamed to &#x60;/authentication/v1/token&#x60; later, when the internal technical dependencies are resolved.
        /// </remarks>
        /// <exception cref="VippsAccessTokenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The string &#39;client_id:client_secret&#39; encoded to Base64 with Basic in front</param>
        /// <param name="grantType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TokenResponse</returns>
        System.Threading.Tasks.Task<TokenResponse> FetchTokenAsync(string authorization, string grantType = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Request an access token.
        /// </summary>
        /// <remarks>
        /// This is a token endpoint for partners in certain roles. This is based on OAuth (Open Authorization) and requires only &#x60;client_id&#x60; and &#x60;client_secret&#x60;. The &#x60;Ocp-Apim-Subscription-Key&#x60; is not used. *Important:* This endpoint will be renamed to &#x60;/authentication/v1/token&#x60; later, when the internal technical dependencies are resolved.
        /// </remarks>
        /// <exception cref="VippsAccessTokenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The string &#39;client_id:client_secret&#39; encoded to Base64 with Basic in front</param>
        /// <param name="grantType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TokenResponse>> FetchTokenWithHttpInfoAsync(string authorization, string grantType = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITokenEndpointApi : ITokenEndpointApiSync, ITokenEndpointApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TokenEndpointApi : ITokenEndpointApi
    {
        private VippsAccessTokenApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TokenEndpointApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TokenEndpointApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TokenEndpointApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TokenEndpointApi(string basePath)
        {
            this.Configuration = VippsAccessTokenApi.Client.Configuration.MergeConfigurations(
                VippsAccessTokenApi.Client.GlobalConfiguration.Instance,
                new VippsAccessTokenApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new VippsAccessTokenApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VippsAccessTokenApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = VippsAccessTokenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TokenEndpointApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TokenEndpointApi(VippsAccessTokenApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = VippsAccessTokenApi.Client.Configuration.MergeConfigurations(
                VippsAccessTokenApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new VippsAccessTokenApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VippsAccessTokenApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = VippsAccessTokenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TokenEndpointApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TokenEndpointApi(VippsAccessTokenApi.Client.ISynchronousClient client, VippsAccessTokenApi.Client.IAsynchronousClient asyncClient, VippsAccessTokenApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = VippsAccessTokenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public VippsAccessTokenApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public VippsAccessTokenApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public VippsAccessTokenApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VippsAccessTokenApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Request an access token. This is a token endpoint for partners in certain roles. This is based on OAuth (Open Authorization) and requires only &#x60;client_id&#x60; and &#x60;client_secret&#x60;. The &#x60;Ocp-Apim-Subscription-Key&#x60; is not used. *Important:* This endpoint will be renamed to &#x60;/authentication/v1/token&#x60; later, when the internal technical dependencies are resolved.
        /// </summary>
        /// <exception cref="VippsAccessTokenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The string &#39;client_id:client_secret&#39; encoded to Base64 with Basic in front</param>
        /// <param name="grantType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TokenResponse</returns>
        public TokenResponse FetchToken(string authorization, string grantType = default(string), int operationIndex = 0)
        {
            VippsAccessTokenApi.Client.ApiResponse<TokenResponse> localVarResponse = FetchTokenWithHttpInfo(authorization, grantType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Request an access token. This is a token endpoint for partners in certain roles. This is based on OAuth (Open Authorization) and requires only &#x60;client_id&#x60; and &#x60;client_secret&#x60;. The &#x60;Ocp-Apim-Subscription-Key&#x60; is not used. *Important:* This endpoint will be renamed to &#x60;/authentication/v1/token&#x60; later, when the internal technical dependencies are resolved.
        /// </summary>
        /// <exception cref="VippsAccessTokenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The string &#39;client_id:client_secret&#39; encoded to Base64 with Basic in front</param>
        /// <param name="grantType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TokenResponse</returns>
        public VippsAccessTokenApi.Client.ApiResponse<TokenResponse> FetchTokenWithHttpInfo(string authorization, string grantType = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
            {
                throw new VippsAccessTokenApi.Client.ApiException(400, "Missing required parameter 'authorization' when calling TokenEndpointApi->FetchToken");
            }

            VippsAccessTokenApi.Client.RequestOptions localVarRequestOptions = new VippsAccessTokenApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded; charset=utf-8"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = VippsAccessTokenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VippsAccessTokenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("Authorization", VippsAccessTokenApi.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            if (grantType != null)
            {
                localVarRequestOptions.FormParameters.Add("grant_type", VippsAccessTokenApi.Client.ClientUtils.ParameterToString(grantType)); // form parameter
            }

            localVarRequestOptions.Operation = "TokenEndpointApi.FetchToken";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TokenResponse>("/miami/v1/token", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FetchToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Request an access token. This is a token endpoint for partners in certain roles. This is based on OAuth (Open Authorization) and requires only &#x60;client_id&#x60; and &#x60;client_secret&#x60;. The &#x60;Ocp-Apim-Subscription-Key&#x60; is not used. *Important:* This endpoint will be renamed to &#x60;/authentication/v1/token&#x60; later, when the internal technical dependencies are resolved.
        /// </summary>
        /// <exception cref="VippsAccessTokenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The string &#39;client_id:client_secret&#39; encoded to Base64 with Basic in front</param>
        /// <param name="grantType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TokenResponse</returns>
        public async System.Threading.Tasks.Task<TokenResponse> FetchTokenAsync(string authorization, string grantType = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VippsAccessTokenApi.Client.ApiResponse<TokenResponse> localVarResponse = await FetchTokenWithHttpInfoAsync(authorization, grantType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Request an access token. This is a token endpoint for partners in certain roles. This is based on OAuth (Open Authorization) and requires only &#x60;client_id&#x60; and &#x60;client_secret&#x60;. The &#x60;Ocp-Apim-Subscription-Key&#x60; is not used. *Important:* This endpoint will be renamed to &#x60;/authentication/v1/token&#x60; later, when the internal technical dependencies are resolved.
        /// </summary>
        /// <exception cref="VippsAccessTokenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The string &#39;client_id:client_secret&#39; encoded to Base64 with Basic in front</param>
        /// <param name="grantType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TokenResponse)</returns>
        public async System.Threading.Tasks.Task<VippsAccessTokenApi.Client.ApiResponse<TokenResponse>> FetchTokenWithHttpInfoAsync(string authorization, string grantType = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
            {
                throw new VippsAccessTokenApi.Client.ApiException(400, "Missing required parameter 'authorization' when calling TokenEndpointApi->FetchToken");
            }


            VippsAccessTokenApi.Client.RequestOptions localVarRequestOptions = new VippsAccessTokenApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded; charset=utf-8"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = VippsAccessTokenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VippsAccessTokenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("Authorization", VippsAccessTokenApi.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            if (grantType != null)
            {
                localVarRequestOptions.FormParameters.Add("grant_type", VippsAccessTokenApi.Client.ClientUtils.ParameterToString(grantType)); // form parameter
            }

            localVarRequestOptions.Operation = "TokenEndpointApi.FetchToken";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TokenResponse>("/miami/v1/token", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FetchToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
