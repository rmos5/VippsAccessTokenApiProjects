/*
 * Access token
 *
 * The Access token API is for requesting an access token, which is a JWT (JSON Web Token).  There are two endpoints:  1. `POST:/accesstoken/get`: Used by most APIs, and has been in use for several years. 2. `POST:/miami/v1/token`: Used by some new APIs and roles, from 2023.  For `POST:/accesstoken/get`: The access token must be provided in all API requests, together with the subscription key. The access token is valid for 1 hour in the test environment and 24 hours in the production environment.  For `POST:/miami/v1/token`: The access token must be provided in all API requests (no subscription key needed). The access token is valid for 15 minutes in both the test environment and the production environment.  See the [API Guide](/docs/APIs/access-token-api) for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using VippsAccessTokenApi.Client;
using VippsAccessTokenApi.Model;

namespace VippsAccessTokenApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthorizationServiceApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Request an access token (JWT bearer token)
        /// </summary>
        /// <remarks>
        /// This is an authentication endpoint for merchant use. The access token endpoint is used to get the JWT (JSON Web Token) that must be passed in every API request in the &#x60;Authorization&#x60; header. The access token is a base64-encoded string value that must be acquired first before making any Vipps MobilePay API calls. The access token is valid for 1 hour in the test environment and 24 hours in the production environment. See: https://developer.vippsmobilepay.com/docs/APIs/access-token-api/
        /// </remarks>
        /// <exception cref="VippsAccessTokenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The &#x60;client_id&#x60; is available on portal.vipps.no, under the *Developer* section. Think of it as the \&quot;username\&quot;.</param>
        /// <param name="clientSecret">The &#x60;client_secret&#x60; is available on portal.vipps.no, under the *Developer* section. Think of it as the \&quot;password\&quot;. Keep it secret. We will never ask for it, and we don&#39;t need it for anything.</param>
        /// <param name="ocpApimSubscriptionKey">The subscription key for a sales unit. See [API keys](/docs/knowledge-base/api-keys/).</param>
        /// <param name="merchantSerialNumber">The merchant serial number (MSN) for the sales unit. The Merchant-Serial-Number header can be used with all API keys, and can speed up any trouble-shooting of API problems quite a bit. (optional)</param>
        /// <param name="vippsSystemName">The name of the ecommerce solution. One word in lowercase letters is good. See [http-headers](/docs/knowledge-base/http-headers). (optional)</param>
        /// <param name="vippsSystemVersion">The version number of the ecommerce solution. See [http-headers](/docs/knowledge-base/http-headers). (optional)</param>
        /// <param name="vippsSystemPluginName">The name of the ecommerce plugin (if applicable). One word in lowercase letters is good. See [http-headers](/docs/knowledge-base/http-headers). (optional)</param>
        /// <param name="vippsSystemPluginVersion">The version number of the ecommerce plugin (if applicable). See [http-headers](/docs/knowledge-base/http-headers). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AuthorizationTokenResponse</returns>
        AuthorizationTokenResponse FetchAuthorizationTokenUsingPost(string clientId, string clientSecret, string ocpApimSubscriptionKey, string merchantSerialNumber = default(string), string vippsSystemName = default(string), string vippsSystemVersion = default(string), string vippsSystemPluginName = default(string), string vippsSystemPluginVersion = default(string), int operationIndex = 0);

        /// <summary>
        /// Request an access token (JWT bearer token)
        /// </summary>
        /// <remarks>
        /// This is an authentication endpoint for merchant use. The access token endpoint is used to get the JWT (JSON Web Token) that must be passed in every API request in the &#x60;Authorization&#x60; header. The access token is a base64-encoded string value that must be acquired first before making any Vipps MobilePay API calls. The access token is valid for 1 hour in the test environment and 24 hours in the production environment. See: https://developer.vippsmobilepay.com/docs/APIs/access-token-api/
        /// </remarks>
        /// <exception cref="VippsAccessTokenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The &#x60;client_id&#x60; is available on portal.vipps.no, under the *Developer* section. Think of it as the \&quot;username\&quot;.</param>
        /// <param name="clientSecret">The &#x60;client_secret&#x60; is available on portal.vipps.no, under the *Developer* section. Think of it as the \&quot;password\&quot;. Keep it secret. We will never ask for it, and we don&#39;t need it for anything.</param>
        /// <param name="ocpApimSubscriptionKey">The subscription key for a sales unit. See [API keys](/docs/knowledge-base/api-keys/).</param>
        /// <param name="merchantSerialNumber">The merchant serial number (MSN) for the sales unit. The Merchant-Serial-Number header can be used with all API keys, and can speed up any trouble-shooting of API problems quite a bit. (optional)</param>
        /// <param name="vippsSystemName">The name of the ecommerce solution. One word in lowercase letters is good. See [http-headers](/docs/knowledge-base/http-headers). (optional)</param>
        /// <param name="vippsSystemVersion">The version number of the ecommerce solution. See [http-headers](/docs/knowledge-base/http-headers). (optional)</param>
        /// <param name="vippsSystemPluginName">The name of the ecommerce plugin (if applicable). One word in lowercase letters is good. See [http-headers](/docs/knowledge-base/http-headers). (optional)</param>
        /// <param name="vippsSystemPluginVersion">The version number of the ecommerce plugin (if applicable). See [http-headers](/docs/knowledge-base/http-headers). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AuthorizationTokenResponse</returns>
        ApiResponse<AuthorizationTokenResponse> FetchAuthorizationTokenUsingPostWithHttpInfo(string clientId, string clientSecret, string ocpApimSubscriptionKey, string merchantSerialNumber = default(string), string vippsSystemName = default(string), string vippsSystemVersion = default(string), string vippsSystemPluginName = default(string), string vippsSystemPluginVersion = default(string), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthorizationServiceApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Request an access token (JWT bearer token)
        /// </summary>
        /// <remarks>
        /// This is an authentication endpoint for merchant use. The access token endpoint is used to get the JWT (JSON Web Token) that must be passed in every API request in the &#x60;Authorization&#x60; header. The access token is a base64-encoded string value that must be acquired first before making any Vipps MobilePay API calls. The access token is valid for 1 hour in the test environment and 24 hours in the production environment. See: https://developer.vippsmobilepay.com/docs/APIs/access-token-api/
        /// </remarks>
        /// <exception cref="VippsAccessTokenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The &#x60;client_id&#x60; is available on portal.vipps.no, under the *Developer* section. Think of it as the \&quot;username\&quot;.</param>
        /// <param name="clientSecret">The &#x60;client_secret&#x60; is available on portal.vipps.no, under the *Developer* section. Think of it as the \&quot;password\&quot;. Keep it secret. We will never ask for it, and we don&#39;t need it for anything.</param>
        /// <param name="ocpApimSubscriptionKey">The subscription key for a sales unit. See [API keys](/docs/knowledge-base/api-keys/).</param>
        /// <param name="merchantSerialNumber">The merchant serial number (MSN) for the sales unit. The Merchant-Serial-Number header can be used with all API keys, and can speed up any trouble-shooting of API problems quite a bit. (optional)</param>
        /// <param name="vippsSystemName">The name of the ecommerce solution. One word in lowercase letters is good. See [http-headers](/docs/knowledge-base/http-headers). (optional)</param>
        /// <param name="vippsSystemVersion">The version number of the ecommerce solution. See [http-headers](/docs/knowledge-base/http-headers). (optional)</param>
        /// <param name="vippsSystemPluginName">The name of the ecommerce plugin (if applicable). One word in lowercase letters is good. See [http-headers](/docs/knowledge-base/http-headers). (optional)</param>
        /// <param name="vippsSystemPluginVersion">The version number of the ecommerce plugin (if applicable). See [http-headers](/docs/knowledge-base/http-headers). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthorizationTokenResponse</returns>
        System.Threading.Tasks.Task<AuthorizationTokenResponse> FetchAuthorizationTokenUsingPostAsync(string clientId, string clientSecret, string ocpApimSubscriptionKey, string merchantSerialNumber = default(string), string vippsSystemName = default(string), string vippsSystemVersion = default(string), string vippsSystemPluginName = default(string), string vippsSystemPluginVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Request an access token (JWT bearer token)
        /// </summary>
        /// <remarks>
        /// This is an authentication endpoint for merchant use. The access token endpoint is used to get the JWT (JSON Web Token) that must be passed in every API request in the &#x60;Authorization&#x60; header. The access token is a base64-encoded string value that must be acquired first before making any Vipps MobilePay API calls. The access token is valid for 1 hour in the test environment and 24 hours in the production environment. See: https://developer.vippsmobilepay.com/docs/APIs/access-token-api/
        /// </remarks>
        /// <exception cref="VippsAccessTokenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The &#x60;client_id&#x60; is available on portal.vipps.no, under the *Developer* section. Think of it as the \&quot;username\&quot;.</param>
        /// <param name="clientSecret">The &#x60;client_secret&#x60; is available on portal.vipps.no, under the *Developer* section. Think of it as the \&quot;password\&quot;. Keep it secret. We will never ask for it, and we don&#39;t need it for anything.</param>
        /// <param name="ocpApimSubscriptionKey">The subscription key for a sales unit. See [API keys](/docs/knowledge-base/api-keys/).</param>
        /// <param name="merchantSerialNumber">The merchant serial number (MSN) for the sales unit. The Merchant-Serial-Number header can be used with all API keys, and can speed up any trouble-shooting of API problems quite a bit. (optional)</param>
        /// <param name="vippsSystemName">The name of the ecommerce solution. One word in lowercase letters is good. See [http-headers](/docs/knowledge-base/http-headers). (optional)</param>
        /// <param name="vippsSystemVersion">The version number of the ecommerce solution. See [http-headers](/docs/knowledge-base/http-headers). (optional)</param>
        /// <param name="vippsSystemPluginName">The name of the ecommerce plugin (if applicable). One word in lowercase letters is good. See [http-headers](/docs/knowledge-base/http-headers). (optional)</param>
        /// <param name="vippsSystemPluginVersion">The version number of the ecommerce plugin (if applicable). See [http-headers](/docs/knowledge-base/http-headers). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthorizationTokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthorizationTokenResponse>> FetchAuthorizationTokenUsingPostWithHttpInfoAsync(string clientId, string clientSecret, string ocpApimSubscriptionKey, string merchantSerialNumber = default(string), string vippsSystemName = default(string), string vippsSystemVersion = default(string), string vippsSystemPluginName = default(string), string vippsSystemPluginVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthorizationServiceApi : IAuthorizationServiceApiSync, IAuthorizationServiceApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AuthorizationServiceApi : IAuthorizationServiceApi
    {
        private VippsAccessTokenApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorizationServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthorizationServiceApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorizationServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthorizationServiceApi(string basePath)
        {
            this.Configuration = VippsAccessTokenApi.Client.Configuration.MergeConfigurations(
                VippsAccessTokenApi.Client.GlobalConfiguration.Instance,
                new VippsAccessTokenApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new VippsAccessTokenApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VippsAccessTokenApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = VippsAccessTokenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorizationServiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AuthorizationServiceApi(VippsAccessTokenApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = VippsAccessTokenApi.Client.Configuration.MergeConfigurations(
                VippsAccessTokenApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new VippsAccessTokenApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VippsAccessTokenApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = VippsAccessTokenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorizationServiceApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AuthorizationServiceApi(VippsAccessTokenApi.Client.ISynchronousClient client, VippsAccessTokenApi.Client.IAsynchronousClient asyncClient, VippsAccessTokenApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = VippsAccessTokenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public VippsAccessTokenApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public VippsAccessTokenApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public VippsAccessTokenApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VippsAccessTokenApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Request an access token (JWT bearer token) This is an authentication endpoint for merchant use. The access token endpoint is used to get the JWT (JSON Web Token) that must be passed in every API request in the &#x60;Authorization&#x60; header. The access token is a base64-encoded string value that must be acquired first before making any Vipps MobilePay API calls. The access token is valid for 1 hour in the test environment and 24 hours in the production environment. See: https://developer.vippsmobilepay.com/docs/APIs/access-token-api/
        /// </summary>
        /// <exception cref="VippsAccessTokenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The &#x60;client_id&#x60; is available on portal.vipps.no, under the *Developer* section. Think of it as the \&quot;username\&quot;.</param>
        /// <param name="clientSecret">The &#x60;client_secret&#x60; is available on portal.vipps.no, under the *Developer* section. Think of it as the \&quot;password\&quot;. Keep it secret. We will never ask for it, and we don&#39;t need it for anything.</param>
        /// <param name="ocpApimSubscriptionKey">The subscription key for a sales unit. See [API keys](/docs/knowledge-base/api-keys/).</param>
        /// <param name="merchantSerialNumber">The merchant serial number (MSN) for the sales unit. The Merchant-Serial-Number header can be used with all API keys, and can speed up any trouble-shooting of API problems quite a bit. (optional)</param>
        /// <param name="vippsSystemName">The name of the ecommerce solution. One word in lowercase letters is good. See [http-headers](/docs/knowledge-base/http-headers). (optional)</param>
        /// <param name="vippsSystemVersion">The version number of the ecommerce solution. See [http-headers](/docs/knowledge-base/http-headers). (optional)</param>
        /// <param name="vippsSystemPluginName">The name of the ecommerce plugin (if applicable). One word in lowercase letters is good. See [http-headers](/docs/knowledge-base/http-headers). (optional)</param>
        /// <param name="vippsSystemPluginVersion">The version number of the ecommerce plugin (if applicable). See [http-headers](/docs/knowledge-base/http-headers). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AuthorizationTokenResponse</returns>
        public AuthorizationTokenResponse FetchAuthorizationTokenUsingPost(string clientId, string clientSecret, string ocpApimSubscriptionKey, string merchantSerialNumber = default(string), string vippsSystemName = default(string), string vippsSystemVersion = default(string), string vippsSystemPluginName = default(string), string vippsSystemPluginVersion = default(string), int operationIndex = 0)
        {
            VippsAccessTokenApi.Client.ApiResponse<AuthorizationTokenResponse> localVarResponse = FetchAuthorizationTokenUsingPostWithHttpInfo(clientId, clientSecret, ocpApimSubscriptionKey, merchantSerialNumber, vippsSystemName, vippsSystemVersion, vippsSystemPluginName, vippsSystemPluginVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Request an access token (JWT bearer token) This is an authentication endpoint for merchant use. The access token endpoint is used to get the JWT (JSON Web Token) that must be passed in every API request in the &#x60;Authorization&#x60; header. The access token is a base64-encoded string value that must be acquired first before making any Vipps MobilePay API calls. The access token is valid for 1 hour in the test environment and 24 hours in the production environment. See: https://developer.vippsmobilepay.com/docs/APIs/access-token-api/
        /// </summary>
        /// <exception cref="VippsAccessTokenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The &#x60;client_id&#x60; is available on portal.vipps.no, under the *Developer* section. Think of it as the \&quot;username\&quot;.</param>
        /// <param name="clientSecret">The &#x60;client_secret&#x60; is available on portal.vipps.no, under the *Developer* section. Think of it as the \&quot;password\&quot;. Keep it secret. We will never ask for it, and we don&#39;t need it for anything.</param>
        /// <param name="ocpApimSubscriptionKey">The subscription key for a sales unit. See [API keys](/docs/knowledge-base/api-keys/).</param>
        /// <param name="merchantSerialNumber">The merchant serial number (MSN) for the sales unit. The Merchant-Serial-Number header can be used with all API keys, and can speed up any trouble-shooting of API problems quite a bit. (optional)</param>
        /// <param name="vippsSystemName">The name of the ecommerce solution. One word in lowercase letters is good. See [http-headers](/docs/knowledge-base/http-headers). (optional)</param>
        /// <param name="vippsSystemVersion">The version number of the ecommerce solution. See [http-headers](/docs/knowledge-base/http-headers). (optional)</param>
        /// <param name="vippsSystemPluginName">The name of the ecommerce plugin (if applicable). One word in lowercase letters is good. See [http-headers](/docs/knowledge-base/http-headers). (optional)</param>
        /// <param name="vippsSystemPluginVersion">The version number of the ecommerce plugin (if applicable). See [http-headers](/docs/knowledge-base/http-headers). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AuthorizationTokenResponse</returns>
        public VippsAccessTokenApi.Client.ApiResponse<AuthorizationTokenResponse> FetchAuthorizationTokenUsingPostWithHttpInfo(string clientId, string clientSecret, string ocpApimSubscriptionKey, string merchantSerialNumber = default(string), string vippsSystemName = default(string), string vippsSystemVersion = default(string), string vippsSystemPluginName = default(string), string vippsSystemPluginVersion = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
            {
                throw new VippsAccessTokenApi.Client.ApiException(400, "Missing required parameter 'clientId' when calling AuthorizationServiceApi->FetchAuthorizationTokenUsingPost");
            }

            // verify the required parameter 'clientSecret' is set
            if (clientSecret == null)
            {
                throw new VippsAccessTokenApi.Client.ApiException(400, "Missing required parameter 'clientSecret' when calling AuthorizationServiceApi->FetchAuthorizationTokenUsingPost");
            }

            // verify the required parameter 'ocpApimSubscriptionKey' is set
            if (ocpApimSubscriptionKey == null)
            {
                throw new VippsAccessTokenApi.Client.ApiException(400, "Missing required parameter 'ocpApimSubscriptionKey' when calling AuthorizationServiceApi->FetchAuthorizationTokenUsingPost");
            }

            VippsAccessTokenApi.Client.RequestOptions localVarRequestOptions = new VippsAccessTokenApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = VippsAccessTokenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VippsAccessTokenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("client_id", VippsAccessTokenApi.Client.ClientUtils.ParameterToString(clientId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("client_secret", VippsAccessTokenApi.Client.ClientUtils.ParameterToString(clientSecret)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Ocp-Apim-Subscription-Key", VippsAccessTokenApi.Client.ClientUtils.ParameterToString(ocpApimSubscriptionKey)); // header parameter
            if (merchantSerialNumber != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Merchant-Serial-Number", VippsAccessTokenApi.Client.ClientUtils.ParameterToString(merchantSerialNumber)); // header parameter
            }
            if (vippsSystemName != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Vipps-System-Name", VippsAccessTokenApi.Client.ClientUtils.ParameterToString(vippsSystemName)); // header parameter
            }
            if (vippsSystemVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Vipps-System-Version", VippsAccessTokenApi.Client.ClientUtils.ParameterToString(vippsSystemVersion)); // header parameter
            }
            if (vippsSystemPluginName != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Vipps-System-Plugin-Name", VippsAccessTokenApi.Client.ClientUtils.ParameterToString(vippsSystemPluginName)); // header parameter
            }
            if (vippsSystemPluginVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Vipps-System-Plugin-Version", VippsAccessTokenApi.Client.ClientUtils.ParameterToString(vippsSystemPluginVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "AuthorizationServiceApi.FetchAuthorizationTokenUsingPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<AuthorizationTokenResponse>("/accesstoken/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FetchAuthorizationTokenUsingPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Request an access token (JWT bearer token) This is an authentication endpoint for merchant use. The access token endpoint is used to get the JWT (JSON Web Token) that must be passed in every API request in the &#x60;Authorization&#x60; header. The access token is a base64-encoded string value that must be acquired first before making any Vipps MobilePay API calls. The access token is valid for 1 hour in the test environment and 24 hours in the production environment. See: https://developer.vippsmobilepay.com/docs/APIs/access-token-api/
        /// </summary>
        /// <exception cref="VippsAccessTokenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The &#x60;client_id&#x60; is available on portal.vipps.no, under the *Developer* section. Think of it as the \&quot;username\&quot;.</param>
        /// <param name="clientSecret">The &#x60;client_secret&#x60; is available on portal.vipps.no, under the *Developer* section. Think of it as the \&quot;password\&quot;. Keep it secret. We will never ask for it, and we don&#39;t need it for anything.</param>
        /// <param name="ocpApimSubscriptionKey">The subscription key for a sales unit. See [API keys](/docs/knowledge-base/api-keys/).</param>
        /// <param name="merchantSerialNumber">The merchant serial number (MSN) for the sales unit. The Merchant-Serial-Number header can be used with all API keys, and can speed up any trouble-shooting of API problems quite a bit. (optional)</param>
        /// <param name="vippsSystemName">The name of the ecommerce solution. One word in lowercase letters is good. See [http-headers](/docs/knowledge-base/http-headers). (optional)</param>
        /// <param name="vippsSystemVersion">The version number of the ecommerce solution. See [http-headers](/docs/knowledge-base/http-headers). (optional)</param>
        /// <param name="vippsSystemPluginName">The name of the ecommerce plugin (if applicable). One word in lowercase letters is good. See [http-headers](/docs/knowledge-base/http-headers). (optional)</param>
        /// <param name="vippsSystemPluginVersion">The version number of the ecommerce plugin (if applicable). See [http-headers](/docs/knowledge-base/http-headers). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthorizationTokenResponse</returns>
        public async System.Threading.Tasks.Task<AuthorizationTokenResponse> FetchAuthorizationTokenUsingPostAsync(string clientId, string clientSecret, string ocpApimSubscriptionKey, string merchantSerialNumber = default(string), string vippsSystemName = default(string), string vippsSystemVersion = default(string), string vippsSystemPluginName = default(string), string vippsSystemPluginVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VippsAccessTokenApi.Client.ApiResponse<AuthorizationTokenResponse> localVarResponse = await FetchAuthorizationTokenUsingPostWithHttpInfoAsync(clientId, clientSecret, ocpApimSubscriptionKey, merchantSerialNumber, vippsSystemName, vippsSystemVersion, vippsSystemPluginName, vippsSystemPluginVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Request an access token (JWT bearer token) This is an authentication endpoint for merchant use. The access token endpoint is used to get the JWT (JSON Web Token) that must be passed in every API request in the &#x60;Authorization&#x60; header. The access token is a base64-encoded string value that must be acquired first before making any Vipps MobilePay API calls. The access token is valid for 1 hour in the test environment and 24 hours in the production environment. See: https://developer.vippsmobilepay.com/docs/APIs/access-token-api/
        /// </summary>
        /// <exception cref="VippsAccessTokenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The &#x60;client_id&#x60; is available on portal.vipps.no, under the *Developer* section. Think of it as the \&quot;username\&quot;.</param>
        /// <param name="clientSecret">The &#x60;client_secret&#x60; is available on portal.vipps.no, under the *Developer* section. Think of it as the \&quot;password\&quot;. Keep it secret. We will never ask for it, and we don&#39;t need it for anything.</param>
        /// <param name="ocpApimSubscriptionKey">The subscription key for a sales unit. See [API keys](/docs/knowledge-base/api-keys/).</param>
        /// <param name="merchantSerialNumber">The merchant serial number (MSN) for the sales unit. The Merchant-Serial-Number header can be used with all API keys, and can speed up any trouble-shooting of API problems quite a bit. (optional)</param>
        /// <param name="vippsSystemName">The name of the ecommerce solution. One word in lowercase letters is good. See [http-headers](/docs/knowledge-base/http-headers). (optional)</param>
        /// <param name="vippsSystemVersion">The version number of the ecommerce solution. See [http-headers](/docs/knowledge-base/http-headers). (optional)</param>
        /// <param name="vippsSystemPluginName">The name of the ecommerce plugin (if applicable). One word in lowercase letters is good. See [http-headers](/docs/knowledge-base/http-headers). (optional)</param>
        /// <param name="vippsSystemPluginVersion">The version number of the ecommerce plugin (if applicable). See [http-headers](/docs/knowledge-base/http-headers). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthorizationTokenResponse)</returns>
        public async System.Threading.Tasks.Task<VippsAccessTokenApi.Client.ApiResponse<AuthorizationTokenResponse>> FetchAuthorizationTokenUsingPostWithHttpInfoAsync(string clientId, string clientSecret, string ocpApimSubscriptionKey, string merchantSerialNumber = default(string), string vippsSystemName = default(string), string vippsSystemVersion = default(string), string vippsSystemPluginName = default(string), string vippsSystemPluginVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
            {
                throw new VippsAccessTokenApi.Client.ApiException(400, "Missing required parameter 'clientId' when calling AuthorizationServiceApi->FetchAuthorizationTokenUsingPost");
            }

            // verify the required parameter 'clientSecret' is set
            if (clientSecret == null)
            {
                throw new VippsAccessTokenApi.Client.ApiException(400, "Missing required parameter 'clientSecret' when calling AuthorizationServiceApi->FetchAuthorizationTokenUsingPost");
            }

            // verify the required parameter 'ocpApimSubscriptionKey' is set
            if (ocpApimSubscriptionKey == null)
            {
                throw new VippsAccessTokenApi.Client.ApiException(400, "Missing required parameter 'ocpApimSubscriptionKey' when calling AuthorizationServiceApi->FetchAuthorizationTokenUsingPost");
            }


            VippsAccessTokenApi.Client.RequestOptions localVarRequestOptions = new VippsAccessTokenApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = VippsAccessTokenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VippsAccessTokenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("client_id", VippsAccessTokenApi.Client.ClientUtils.ParameterToString(clientId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("client_secret", VippsAccessTokenApi.Client.ClientUtils.ParameterToString(clientSecret)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Ocp-Apim-Subscription-Key", VippsAccessTokenApi.Client.ClientUtils.ParameterToString(ocpApimSubscriptionKey)); // header parameter
            if (merchantSerialNumber != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Merchant-Serial-Number", VippsAccessTokenApi.Client.ClientUtils.ParameterToString(merchantSerialNumber)); // header parameter
            }
            if (vippsSystemName != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Vipps-System-Name", VippsAccessTokenApi.Client.ClientUtils.ParameterToString(vippsSystemName)); // header parameter
            }
            if (vippsSystemVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Vipps-System-Version", VippsAccessTokenApi.Client.ClientUtils.ParameterToString(vippsSystemVersion)); // header parameter
            }
            if (vippsSystemPluginName != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Vipps-System-Plugin-Name", VippsAccessTokenApi.Client.ClientUtils.ParameterToString(vippsSystemPluginName)); // header parameter
            }
            if (vippsSystemPluginVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Vipps-System-Plugin-Version", VippsAccessTokenApi.Client.ClientUtils.ParameterToString(vippsSystemPluginVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "AuthorizationServiceApi.FetchAuthorizationTokenUsingPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AuthorizationTokenResponse>("/accesstoken/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FetchAuthorizationTokenUsingPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
