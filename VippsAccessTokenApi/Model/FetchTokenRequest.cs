/*
 * Access token
 *
 * The Access token API is for requesting an access token, which is a JWT (JSON Web Token).  There are two endpoints:  1. `POST:/accesstoken/get`: Used by most APIs, and has been in use for several years. 2. `POST:/miami/v1/token`: Used by some new APIs and roles, from 2023.  For `POST:/accesstoken/get`: The access token must be provided in all API requests, together with the subscription key. The access token is valid for 1 hour in the test environment and 24 hours in the production environment.  For `POST:/miami/v1/token`: The access token must be provided in all API requests (no subscription key needed). The access token is valid for 15 minutes in both the test environment and the production environment.  See the [API Guide](/docs/APIs/access-token-api) for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VippsAccessTokenApi.Client.OpenAPIDateConverter;

namespace VippsAccessTokenApi.Model
{
    /// <summary>
    /// FetchTokenRequest
    /// </summary>
    [DataContract(Name = "fetchToken_request")]
    public partial class FetchTokenRequest : IValidatableObject
    {
        /// <summary>
        /// Defines GrantType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum GrantTypeEnum
        {
            /// <summary>
            /// Enum ClientCredentials for value: client_credentials
            /// </summary>
            [EnumMember(Value = "client_credentials")]
            ClientCredentials = 1
        }


        /// <summary>
        /// Gets or Sets GrantType
        /// </summary>
        /// <example>client_credentials</example>
        [DataMember(Name = "grant_type", EmitDefaultValue = false)]
        public GrantTypeEnum? GrantType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FetchTokenRequest" /> class.
        /// </summary>
        /// <param name="grantType">grantType.</param>
        public FetchTokenRequest(GrantTypeEnum? grantType = default(GrantTypeEnum?))
        {
            this.GrantType = grantType;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FetchTokenRequest {\n");
            sb.Append("  GrantType: ").Append(GrantType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
