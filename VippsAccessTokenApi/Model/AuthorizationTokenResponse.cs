/*
 * Access token
 *
 * The Access token API is for requesting an access token, which is a JWT (JSON Web Token).  There are two endpoints:  1. `POST:/accesstoken/get`: Used by most APIs, and has been in use for several years. 2. `POST:/miami/v1/token`: Used by some new APIs and roles, from 2023.  For `POST:/accesstoken/get`: The access token must be provided in all API requests, together with the subscription key. The access token is valid for 1 hour in the test environment and 24 hours in the production environment.  For `POST:/miami/v1/token`: The access token must be provided in all API requests (no subscription key needed). The access token is valid for 15 minutes in both the test environment and the production environment.  See the [API Guide](/docs/APIs/access-token-api) for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VippsAccessTokenApi.Client.OpenAPIDateConverter;

namespace VippsAccessTokenApi.Model
{
    /// <summary>
    /// AuthorizationTokenResponse
    /// </summary>
    [DataContract(Name = "AuthorizationTokenResponse")]
    public partial class AuthorizationTokenResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorizationTokenResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AuthorizationTokenResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorizationTokenResponse" /> class.
        /// </summary>
        /// <param name="tokenType">The type for the access token. This will always be &#x60;Bearer&#x60;. (required).</param>
        /// <param name="expiresIn">Token expiry time in seconds. The access token is valid for 1 hour in the test environment and 24 hours in the production environment. (required).</param>
        /// <param name="extExpiresIn">Extra time added to expiry time. Currently disabled. (required).</param>
        /// <param name="expiresOn">Token expiry time in epoch time format. (required).</param>
        /// <param name="notBefore">Token creation time in epoch time format. (required).</param>
        /// <param name="resource">A common resource object. Not used in token validation. This can be disregarded. (required).</param>
        /// <param name="accessToken">The access token itself. It is a base64-encoded string, typically 1000+ characters. It can be decoded on https://jwt.io, and using standard libraries. See the documentation for details. (required).</param>
        public AuthorizationTokenResponse(string tokenType = default(string), string expiresIn = default(string), string extExpiresIn = default(string), string expiresOn = default(string), string notBefore = default(string), string resource = default(string), string accessToken = default(string))
        {
            // to ensure "tokenType" is required (not null)
            if (tokenType == null)
            {
                throw new ArgumentNullException("tokenType is a required property for AuthorizationTokenResponse and cannot be null");
            }
            this.TokenType = tokenType;
            // to ensure "expiresIn" is required (not null)
            if (expiresIn == null)
            {
                throw new ArgumentNullException("expiresIn is a required property for AuthorizationTokenResponse and cannot be null");
            }
            this.ExpiresIn = expiresIn;
            // to ensure "extExpiresIn" is required (not null)
            if (extExpiresIn == null)
            {
                throw new ArgumentNullException("extExpiresIn is a required property for AuthorizationTokenResponse and cannot be null");
            }
            this.ExtExpiresIn = extExpiresIn;
            // to ensure "expiresOn" is required (not null)
            if (expiresOn == null)
            {
                throw new ArgumentNullException("expiresOn is a required property for AuthorizationTokenResponse and cannot be null");
            }
            this.ExpiresOn = expiresOn;
            // to ensure "notBefore" is required (not null)
            if (notBefore == null)
            {
                throw new ArgumentNullException("notBefore is a required property for AuthorizationTokenResponse and cannot be null");
            }
            this.NotBefore = notBefore;
            // to ensure "resource" is required (not null)
            if (resource == null)
            {
                throw new ArgumentNullException("resource is a required property for AuthorizationTokenResponse and cannot be null");
            }
            this.Resource = resource;
            // to ensure "accessToken" is required (not null)
            if (accessToken == null)
            {
                throw new ArgumentNullException("accessToken is a required property for AuthorizationTokenResponse and cannot be null");
            }
            this.AccessToken = accessToken;
        }

        /// <summary>
        /// The type for the access token. This will always be &#x60;Bearer&#x60;.
        /// </summary>
        /// <value>The type for the access token. This will always be &#x60;Bearer&#x60;.</value>
        /// <example>Bearer</example>
        [DataMember(Name = "token_type", IsRequired = true, EmitDefaultValue = true)]
        public string TokenType { get; set; }

        /// <summary>
        /// Token expiry time in seconds. The access token is valid for 1 hour in the test environment and 24 hours in the production environment.
        /// </summary>
        /// <value>Token expiry time in seconds. The access token is valid for 1 hour in the test environment and 24 hours in the production environment.</value>
        /// <example>3600</example>
        [DataMember(Name = "expires_in", IsRequired = true, EmitDefaultValue = true)]
        public string ExpiresIn { get; set; }

        /// <summary>
        /// Extra time added to expiry time. Currently disabled.
        /// </summary>
        /// <value>Extra time added to expiry time. Currently disabled.</value>
        /// <example>3600</example>
        [DataMember(Name = "ext_expires_in", IsRequired = true, EmitDefaultValue = true)]
        public string ExtExpiresIn { get; set; }

        /// <summary>
        /// Token expiry time in epoch time format.
        /// </summary>
        /// <value>Token expiry time in epoch time format.</value>
        /// <example>1547823408</example>
        [DataMember(Name = "expires_on", IsRequired = true, EmitDefaultValue = true)]
        public string ExpiresOn { get; set; }

        /// <summary>
        /// Token creation time in epoch time format.
        /// </summary>
        /// <value>Token creation time in epoch time format.</value>
        /// <example>1547819508</example>
        [DataMember(Name = "not_before", IsRequired = true, EmitDefaultValue = true)]
        public string NotBefore { get; set; }

        /// <summary>
        /// A common resource object. Not used in token validation. This can be disregarded.
        /// </summary>
        /// <value>A common resource object. Not used in token validation. This can be disregarded.</value>
        /// <example>00000002-0000-0000-c000-000000000000</example>
        [DataMember(Name = "resource", IsRequired = true, EmitDefaultValue = true)]
        public string Resource { get; set; }

        /// <summary>
        /// The access token itself. It is a base64-encoded string, typically 1000+ characters. It can be decoded on https://jwt.io, and using standard libraries. See the documentation for details.
        /// </summary>
        /// <value>The access token itself. It is a base64-encoded string, typically 1000+ characters. It can be decoded on https://jwt.io, and using standard libraries. See the documentation for details.</value>
        /// <example>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1Ni &lt;truncated&gt;</example>
        [DataMember(Name = "access_token", IsRequired = true, EmitDefaultValue = true)]
        public string AccessToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuthorizationTokenResponse {\n");
            sb.Append("  TokenType: ").Append(TokenType).Append("\n");
            sb.Append("  ExpiresIn: ").Append(ExpiresIn).Append("\n");
            sb.Append("  ExtExpiresIn: ").Append(ExtExpiresIn).Append("\n");
            sb.Append("  ExpiresOn: ").Append(ExpiresOn).Append("\n");
            sb.Append("  NotBefore: ").Append(NotBefore).Append("\n");
            sb.Append("  Resource: ").Append(Resource).Append("\n");
            sb.Append("  AccessToken: ").Append(AccessToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
