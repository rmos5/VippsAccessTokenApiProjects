/*
 * Access token
 *
 * The Access token API is for requesting an access token, which is a JWT (JSON Web Token).  There are two endpoints:  1. `POST:/accesstoken/get`: Used by most APIs, and has been in use for several years. 2. `POST:/miami/v1/token`: Used by some new APIs and roles, from 2023.  For `POST:/accesstoken/get`: The access token must be provided in all API requests, together with the subscription key. The access token is valid for 1 hour in the test environment and 24 hours in the production environment.  For `POST:/miami/v1/token`: The access token must be provided in all API requests (no subscription key needed). The access token is valid for 15 minutes in both the test environment and the production environment.  See the [API Guide](/docs/APIs/access-token-api) for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VippsAccessTokenApi.Client.OpenAPIDateConverter;

namespace VippsAccessTokenApi.Model
{
    /// <summary>
    /// This _new_ accesstoken endpoint is used to get the JWT (JSON Web Token) that must be passed in every API request in the &#x60;Authorization&#x60; header. The access token is a base64-encoded string value that must be acquired first before making any Vipps MobilePay API calls. The access token is valid for 15 minutes both in the test environment and in the production environment. See: https://developer.vippsmobilepay.com/docs/APIs/access-token-api/
    /// </summary>
    [DataContract(Name = "TokenResponse")]
    public partial class TokenResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TokenResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenResponse" /> class.
        /// </summary>
        /// <param name="tokenType">The type for the access token. This will always be &#x60;Bearer&#x60;. (required).</param>
        /// <param name="expiresIn">Token expiry time in seconds. The token is currently valid for 15 minutes. (required).</param>
        /// <param name="accessToken">The access token itself. It is a base64-encoded string, typically 1000+ characters. (required).</param>
        public TokenResponse(string tokenType = default(string), string expiresIn = default(string), byte[] accessToken = default(byte[]))
        {
            // to ensure "tokenType" is required (not null)
            if (tokenType == null)
            {
                throw new ArgumentNullException("tokenType is a required property for TokenResponse and cannot be null");
            }
            this.TokenType = tokenType;
            // to ensure "expiresIn" is required (not null)
            if (expiresIn == null)
            {
                throw new ArgumentNullException("expiresIn is a required property for TokenResponse and cannot be null");
            }
            this.ExpiresIn = expiresIn;
            // to ensure "accessToken" is required (not null)
            if (accessToken == null)
            {
                throw new ArgumentNullException("accessToken is a required property for TokenResponse and cannot be null");
            }
            this.AccessToken = accessToken;
        }

        /// <summary>
        /// The type for the access token. This will always be &#x60;Bearer&#x60;.
        /// </summary>
        /// <value>The type for the access token. This will always be &#x60;Bearer&#x60;.</value>
        /// <example>Bearer</example>
        [DataMember(Name = "token_type", IsRequired = true, EmitDefaultValue = true)]
        public string TokenType { get; set; }

        /// <summary>
        /// Token expiry time in seconds. The token is currently valid for 15 minutes.
        /// </summary>
        /// <value>Token expiry time in seconds. The token is currently valid for 15 minutes.</value>
        /// <example>900</example>
        [DataMember(Name = "expires_in", IsRequired = true, EmitDefaultValue = true)]
        public string ExpiresIn { get; set; }

        /// <summary>
        /// The access token itself. It is a base64-encoded string, typically 1000+ characters.
        /// </summary>
        /// <value>The access token itself. It is a base64-encoded string, typically 1000+ characters.</value>
        /// <example>[B@3a60c416</example>
        [DataMember(Name = "access_token", IsRequired = true, EmitDefaultValue = true)]
        public byte[] AccessToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TokenResponse {\n");
            sb.Append("  TokenType: ").Append(TokenType).Append("\n");
            sb.Append("  ExpiresIn: ").Append(ExpiresIn).Append("\n");
            sb.Append("  AccessToken: ").Append(AccessToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
